{"version":3,"file":"rpc-websocket-client.es5.js","sources":["../node_modules/uuid/dist/esm-node/rng.js","../node_modules/uuid/dist/esm-node/regex.js","../node_modules/uuid/dist/esm-node/validate.js","../node_modules/uuid/dist/esm-node/stringify.js","../node_modules/uuid/dist/esm-node/v4.js","../src/rpc-websocket-client.ts"],"sourcesContent":["import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import * as IWebSocket from 'isomorphic-ws';\nimport { v4 } from 'uuid';\n\nconst WebSocket = require('isomorphic-ws');\n\nexport type RpcEventFunction = (\n    e: IWebSocket.Event | IWebSocket.ErrorEvent\n) => void;\nexport type RpcMessageEventFunction = (e: IWebSocket.MessageEvent) => void;\nexport type RpcCloseEventFunction = (e: IWebSocket.CloseEvent) => void;\n\nexport type RpcNotificationEvent = (data: IRpcNotification) => void;\nexport type RpcRequestEvent = (data: IRpcRequest) => void;\nexport type RpcSuccessResponseEvent = (data: IRpcSuccessResponse) => void;\nexport type RpcErrorResponseEvent = (data: IRpcErrorResponse) => void;\n\nexport enum RpcVersions {\n    RPC_VERSION = '2.0',\n}\n\nexport type RpcId = string | number;\n\nexport interface IRpcData {\n    method: string;\n    params?: any;\n}\n\nexport interface IRpcNotification extends IRpcData {\n    jsonrpc: RpcVersions.RPC_VERSION;\n}\n\nexport interface IRpcRequest extends IRpcNotification {\n    // if not included its notification\n    id: RpcId;\n}\n\nexport interface IRpcResponse {\n    id: RpcId;\n    jsonrpc: RpcVersions.RPC_VERSION;\n}\n\nexport interface IRpcSuccessResponse extends IRpcResponse {\n    // if not included its notification\n    result: any;\n}\n\nexport interface IRpcError {\n    code: number;\n    message: string;\n    data?: any;\n}\n\nexport interface IRpcErrorResponse extends IRpcResponse {\n    error: IRpcError;\n}\n\nexport interface IRpcWebSocketConfig {\n    responseTimeout: number;\n}\n\nexport type RpcUnidentifiedMessage =\n    | IRpcRequest\n    | IRpcNotification\n    | IRpcSuccessResponse\n    | IRpcErrorResponse;\n\nexport class RpcWebSocketClient {\n    // native websocket\n    public ws: IWebSocket;\n\n    private idAwaiter: {\n        [id: string]: (data?: any) => void;\n    } = {};\n\n    public onOpenHandlers: RpcEventFunction[] = [];\n    public onAnyMessageHandlers: RpcMessageEventFunction[] = [];\n\n    public onNotification: RpcNotificationEvent[] = [];\n    public onRequest: RpcRequestEvent[] = [];\n    public onSuccessResponse: RpcSuccessResponseEvent[] = [];\n    public onErrorResponse: RpcErrorResponseEvent[] = [];\n\n    public onErrorHandlers: RpcEventFunction[] = [];\n    public onCloseHandlers: RpcCloseEventFunction[] = [];\n\n    public config: IRpcWebSocketConfig = {\n        responseTimeout: 10000,\n    };\n\n    // constructor\n    /**\n     * Does not start WebSocket connection!\n     * You need to call connect() method first.\n     * @memberof RpcWebSocketClient\n     */\n    public constructor() {\n        this.ws = undefined as any;\n    }\n\n    // public\n    /**\n     * Starts WebSocket connection. Returns Promise when connection is established.\n     * @param {string} url\n     * @param {(string | string[])} [protocols]\n     * @memberof RpcWebSocketClient\n     */\n    public connect(url: string, protocols?: string | string[]) {\n        this.ws = new WebSocket(url, protocols);\n        return this.listen();\n    }\n\n    // events\n    public onOpen(fn: RpcEventFunction) {\n        this.onOpenHandlers.push(fn);\n    }\n\n    /**\n     * Native onMessage event. DO NOT USE THIS unless you really have to or for debugging purposes.\n     * Proper RPC events are onRequest, onNotification, onSuccessResponse and onErrorResponse (or just awaiting response).\n     * @param {RpcMessageEventFunction} fn\n     * @memberof RpcWebSocketClient\n     */\n    public onAnyMessage(fn: RpcMessageEventFunction) {\n        this.onAnyMessageHandlers.push(fn);\n    }\n\n    public onError(fn: RpcEventFunction) {\n        this.onErrorHandlers.push(fn);\n    }\n\n    public onClose(fn: RpcCloseEventFunction) {\n        this.onCloseHandlers.push(fn);\n    }\n\n    /**\n     * Appends onmessage listener on native websocket with RPC handlers.\n     * If onmessage function was already there, it will call it on beggining.\n     * Useful if you want to use RPC WebSocket Client on already established WebSocket along with function changeSocket().\n     * @memberof RpcWebSocketClient\n     */\n    public listenMessages() {\n        let previousOnMessage: RpcMessageEventFunction | undefined;\n        if (this.ws.onmessage) {\n            previousOnMessage = this.ws.onmessage.bind(this.ws);\n        }\n\n        this.ws.onmessage = (e: IWebSocket.MessageEvent) => {\n            if (previousOnMessage) {\n                previousOnMessage(e);\n            }\n\n            for (const handler of this.onAnyMessageHandlers) {\n                handler(e);\n            }\n\n            const data: RpcUnidentifiedMessage = JSON.parse(e.data.toString());\n            if (this.isNotification(data)) {\n                // notification\n                for (const handler of this.onNotification) {\n                    handler(data);\n                }\n            } else if (this.isRequest(data)) {\n                // request\n                for (const handler of this.onRequest) {\n                    handler(data);\n                }\n                // responses\n            } else if (this.isSuccessResponse(data)) {\n                // success\n                for (const handler of this.onSuccessResponse) {\n                    handler(data);\n                }\n\n                // resolve awaiting function\n                this.idAwaiter[data.id](data.result);\n            } else if (this.isErrorResponse(data)) {\n                // error\n                for (const handler of this.onErrorResponse) {\n                    handler(data);\n                }\n\n                // resolve awaiting function\n                this.idAwaiter[data.id](data.error);\n            }\n        };\n    }\n\n    // communication\n\n    /**\n     * Creates and sends RPC request. Resolves when appropirate response is returned from server or after config.responseTimeout.\n     * @param {string} method\n     * @param {*} [params]\n     * @returns\n     * @memberof RpcWebSocketClient\n     */\n    public call<T = any>(method: string, params?: any): Promise<T> {\n        return new Promise((resolve, reject) => {\n            const data = this.buildRequest(method, params);\n\n            // give limited time for response\n            let timeout: number | NodeJS.Timeout;\n            if (this.config.responseTimeout) {\n                timeout = setTimeout(() => {\n                    // stop waiting for response\n                    delete this.idAwaiter[data.id];\n                    reject(\n                        `Awaiting response to \"${method}\" with id: ${data.id} timed out.`\n                    );\n                }, this.config.responseTimeout);\n            }\n\n            // expect response\n            this.idAwaiter[data.id] = (responseData?: any) => {\n                // stop timeout\n                clearInterval(timeout as number);\n                // stop waiting for response\n                delete this.idAwaiter[data.id];\n\n                if (this.isRpcError(responseData)) {\n                    reject(responseData);\n                    return;\n                }\n\n                resolve(responseData);\n            };\n\n            const json = JSON.stringify(data);\n            this.ws.send(json);\n        });\n    }\n\n    /**\n     * Creates and sends RPC Notification.\n     * @param {string} method\n     * @param {*} [params]\n     * @memberof RpcWebSocketClient\n     */\n    public notify(method: string, params?: any) {\n        this.ws.send(JSON.stringify(this.buildNotification(method, params)));\n    }\n\n    // setup\n\n    /**\n     * You can provide custom id generation function to replace default uuid/v1.\n     * @param {() => string} idFn\n     * @memberof RpcWebSocketClient\n     */\n    public customId(idFn: () => string) {\n        this.idFn = idFn;\n    }\n\n    /**\n     * Removed jsonrpc from sent messages. Good if you don't care about standards or need better performance.\n     * @memberof RpcWebSocketClient\n     */\n    public noRpc() {\n        this.buildRequest = this.buildRequestBase;\n        this.buildNotification = this.buildNotificationBase;\n        this.buildRpcSuccessResponse = this.buildRpcSuccessResponseBase;\n        this.buildRpcErrorResponse = this.buildRpcErrorResponseBase;\n    }\n\n    /**\n     * Allows modifying configuration.\n     * @param {RpcWebSocketConfig} options\n     * @memberof RpcWebSocketClient\n     */\n    public configure(options: IRpcWebSocketConfig) {\n        Object.assign(this.config, options);\n    }\n\n    /**\n     * Allows you to change used native WebSocket client to another one.\n     * If you have already-connected WebSocket, use this with listenMessages().\n     * @param {WebSocket} ws\n     * @memberof RpcWebSocketClient\n     */\n    public changeSocket(ws: IWebSocket) {\n        this.ws = ws;\n    }\n\n    // private\n\n    // events\n    private listen() {\n        return new Promise((resolve, reject) => {\n            this.ws.onopen = (e: IWebSocket.Event) => {\n                for (const handler of this.onOpenHandlers) {\n                    handler(e);\n                }\n                resolve(e);\n            };\n\n            // listen for messages\n            this.listenMessages();\n\n            // called before onclose\n            this.ws.onerror = (e: IWebSocket.ErrorEvent) => {\n                for (const handler of this.onErrorHandlers) {\n                    handler(e);\n                }\n            };\n\n            this.ws.onclose = (e: IWebSocket.CloseEvent) => {\n                for (const handler of this.onCloseHandlers) {\n                    handler(e);\n                }\n                reject(e);\n            };\n        });\n    }\n\n    // request\n    private buildRequest(method: string, params?: any): IRpcRequest {\n        const data = this.buildRequestBase(method, params);\n        data.jsonrpc = RpcVersions.RPC_VERSION;\n        return data;\n    }\n\n    private buildRequestBase(method: string, params?: any): IRpcRequest {\n        const data: IRpcRequest = {} as any;\n        data.id = this.idFn();\n        data.method = method;\n\n        if (params) {\n            data.params = params;\n        }\n\n        return data;\n    }\n\n    // notification\n    private buildNotification(method: string, params?: any): IRpcNotification {\n        const data = this.buildNotificationBase(method, params);\n        data.jsonrpc = RpcVersions.RPC_VERSION;\n        return data;\n    }\n\n    private buildNotificationBase(\n        method: string,\n        params?: any\n    ): IRpcNotification {\n        const data: IRpcNotification = {} as any;\n        data.method = method;\n\n        if (params) {\n            data.params = params;\n        }\n\n        return data;\n    }\n\n    // success response\n    private buildRpcSuccessResponse(\n        id: RpcId,\n        result: any\n    ): IRpcSuccessResponse {\n        const data = this.buildRpcSuccessResponseBase(id, result);\n        data.jsonrpc = RpcVersions.RPC_VERSION;\n        return data;\n    }\n\n    private buildRpcSuccessResponseBase(\n        id: RpcId,\n        result: any\n    ): IRpcSuccessResponse {\n        const data: IRpcSuccessResponse = {} as any;\n        data.id = id;\n        data.result = result;\n        return data;\n    }\n\n    // error response\n    private buildRpcErrorResponse(\n        id: RpcId,\n        error: IRpcError\n    ): IRpcErrorResponse {\n        const data = this.buildRpcErrorResponseBase(id, error);\n        data.jsonrpc = RpcVersions.RPC_VERSION;\n        return data;\n    }\n\n    private buildRpcErrorResponseBase(\n        id: RpcId,\n        error: IRpcError\n    ): IRpcErrorResponse {\n        const data: IRpcErrorResponse = {} as any;\n        data.id = id;\n        data.error = error;\n        return data;\n    }\n\n    private idFn(): RpcId {\n        return v4();\n    }\n\n    // tests\n    private isNotification(\n        data: RpcUnidentifiedMessage\n    ): data is IRpcNotification {\n        return !(data as any).id;\n    }\n\n    private isRequest(data: RpcUnidentifiedMessage): data is IRpcRequest {\n        return (data as any).method;\n    }\n\n    private isSuccessResponse(\n        data: RpcUnidentifiedMessage\n    ): data is IRpcSuccessResponse {\n        return data.hasOwnProperty(`result`);\n    }\n\n    private isErrorResponse(\n        data: RpcUnidentifiedMessage\n    ): data is IRpcErrorResponse {\n        return data.hasOwnProperty(`error`);\n    }\n\n    private isRpcError(data: any): data is IRpcError {\n        return typeof data?.code !== 'undefined';\n    }\n}\n"],"names":[],"mappings":"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"}